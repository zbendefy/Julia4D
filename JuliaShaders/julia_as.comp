#version 430 core

#pragma include("julia_common")

layout(local_size_x = BlockSizeX, local_size_y = BlockSizeY, local_size_z = BlockSizeZ) in;

layout (std430, binding=2) readonly buffer voxels
{
  uint VoxelData[];
};

layout (std430, binding=3) writeonly buffer voxel_as
{
  uint VoxelAS[];
};

uniform float u_resolution_f;
uniform int u_resolution_i;

shared uint voxel_block_data;

uint GetASBlockId()
{
  ivec3 as_block_count = ivec3(AS_Size) / ivec3(BlockSizeX, BlockSizeY, BlockSizeZ);
  return gl_WorkGroupID.x * as_block_count.y * as_block_count.z + gl_WorkGroupID.y * as_block_count.z + gl_WorkGroupID.z;
}

uint GetASSubBlockId()
{
  return gl_LocalInvocationID.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z + gl_LocalInvocationID.y * gl_WorkGroupSize.z + gl_LocalInvocationID.z;
}

//Returns the range where this thread should check
// (the min and max coordinates of the cube in block coordinates)
void GetVoxelBlocksRange(out ivec3 begin, out ivec3 end)
{
  const ivec3 block_count = ivec3(u_resolution_i) / ivec3(BlockSizeX, BlockSizeY, BlockSizeZ);
  const ivec3 voxel_blocks_in_as_block = block_count / ivec3(AS_Size);

  begin = ivec3(gl_GlobalInvocationID) * voxel_blocks_in_as_block;
  end = (ivec3(gl_GlobalInvocationID) + ivec3(1)) * voxel_blocks_in_as_block;
}

uint GetVoxelBlockIndex(ivec3 block_indices)
{
  const ivec3 block_count = ivec3(u_resolution_i) / ivec3(BlockSizeX, BlockSizeY, BlockSizeZ);
  return block_indices.x * block_count.z * block_count.y + block_indices.y * block_count.z + block_indices.z;
}

#define IsWorkgroupController (gl_LocalInvocationIndex == 0u)

void main() {
    if (IsWorkgroupController)
    {
        voxel_block_data = 0;
    }

    uint calculationResult = 0;
    
    ivec3 idx_min, idx_max;
    GetVoxelBlocksRange(idx_min, idx_max);
    for(uint x = idx_min.x; x < idx_max.x; ++x)
    {
      for(uint y = idx_min.y; y < idx_max.y; ++y)
      {
        for(uint z = idx_min.z; z < idx_max.z; ++z)
        {
          const uint voxel_block_idx = GetVoxelBlockIndex(ivec3(x,y,z));
          bool has_content = VoxelData[voxel_block_idx] != 0;
          if(has_content)
          {
            const uint bitIndex = GetASSubBlockId();
            calculationResult = 1 << bitIndex;
            x=idx_max.x;
            y=idx_max.y;
            z=idx_max.z;
          }
          
        }
      }
    }

    barrier(); //Wait for workgroup controller to zero the 'voxel_block_data' data

    if ( calculationResult != 0 )
    {
        atomicOr(voxel_block_data, calculationResult); 
    }

    barrier(); //Wait for all workgroup members to finish adding their calculation result

    if (IsWorkgroupController)
    {
        VoxelAS[GetASBlockId()] = voxel_block_data;
    }
}